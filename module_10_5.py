'''
Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.
Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.

Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и
выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер
with и объект Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список
названий файлов. Измерьте время выполнения и выведите его в консоль.
Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности,
предварительно закомментировав другой.

Примечания:
Используйте конструкцию if __name__ == '__main__' при многопроссном подходе.
Выводить или возвращать список all_data в функции не нужно. Можете сделать это, но кол-во информации
в файлах достигает - 10^9 строк.
'''
import datetime
import multiprocessing

name1 = f'./file 1.txt'
name2 = f'./file 2.txt'
name3 = f'./file 3.txt'
name4 = f'./file 4.txt'


def read_info(name):
    all_data = []
    with open(name, 'r') as f:
        while True:
            line = f.readline()
            all_data.append(line)
            if not line:
                break


# start = datetime.datetime.now()
# a = read_info(name1)
# b = read_info(name2)
# c = read_info(name3)
# d = read_info(name4)
#
# filenames = [f'./file {number}.txt' for number in range(1, 5)]
# end = datetime.datetime.now()
# res = end - start
# print(f'{res} (линейный)')                 # 0:00:07.468286

if __name__ == '__main__':
    with multiprocessing.Pool(processes=4) as pool:
        start = datetime.datetime.now()
        pool.map(read_info, (name1, name2, name3, name4))
    end = datetime.datetime.now()
    res = end - start
    print(f'{res} (многопроцессный)')         # 0:00:02.878331
